########################################
# Actors: Farmer, Processor, Distributor, Retailer, Customer, Regulator
# Main State Transitions: Farmer -> Processor -> Distributor - > Retailer -> Customer -> Regulator
# Two parallel states: ProductFlow, RegulatorControl
# State Conditions: 
#  - Farmer: seedsPlanted, cropIsReady, cropHarvested, cropSent
#  - Processor: receivedCrop, cropProcessed, processedCropSent
#  - Distributor: stockReceived, stockEvaluated, deliverStocks, stockAvailable
#  - Retailer: 
#  - Customer: productFound, orderCreated, orderReceived, paymentComplete
#  - Regulator: qualityCriteriaMet, safetyCriteriaMet
########################################

statechart:
  # Initial Information about the Statechart
  name: Product Lifecycle in Blockchain
  description: Sismic Statechart representing the course of a product from farmer to customer using Ethereum Blockchain. Regulator is used to ensure quality and safery criteria
  # Initial conditions for the flow of product
  preamble: |
    seedsPlanted = False
    cropIsReady = False
    cropHarvested = False
    cropSent = False
    receivedCrop = False
    cropProcessed = False
    processedCropSent = False
    stockReceived = False
    stockEvaluated = False
    deliverStocks = False
    stockAvailable = False
    productReceived = False
    productStored = False
    productAvailable = False
    paymentCompleted = False
    deliveryMade = False
    waitingDelivery = False
    qualityCriteriaMet = False
    safetyCriteriaMet = False
  root state: 
    name: agricultureSystem
    states:
      # Product Flow from Farmer to Customer
      - name: ProductFlow
        initial: Farmer
        states:
          # Farmer's Process
          ####################
          # States: Plant Seeds -> Crop Ready -> Harvest Crop -> Check Quality
          ####################
          - name: Farmer
            initial: plantSeeds
            states:
              - name: plantSeeds
                transitions:
                  - target: cropReady
                    action: seedsPlanted = True
              - name: cropReady
                transitions:
                  - target: cropHarvest
                    guard: seedsPlanted == True
                    action: cropIsReady = True
              - name: cropHarvest
                transitions:
                  - target: cropQuality
                    guard:  cropIsReady == True
                    action: cropHarvested = True
              - name: cropQuality
                transitions:
                  - target: Processor
                    guard: qualityCriteriaMet == True and safetyCriteriaMet == True and cropHarvested == True
                    action: cropSent = True
                  - target: checkFarmer
                    guard: qualityCriteriaMet == False and safetyCriteriaMet == False and cropHarvested == True
                    action: cropSent = True
                      
          # Processor's Process
          ####################
          # States: Receive Crop -> Process Crop -> Check Quality
          ####################
          - name: Processor
            on entry: |
              qualityCriteriaMet = False
              safetyCriteriaMet = False
            initial: receiveCrop
            states:
              - name: receiveCrop
                transitions:
                  - target: cropProcess
                    guard: cropSent == True
                    action: receivedCrop = True
              - name: cropProcess
                transitions:
                  - target: processedCropQuality
                    guard:  receivedCrop == True
                    action: cropProcessed = True
              - name: processedCropQuality
                transitions:
                  - target: Distributor
                    guard: qualityCriteriaMet == True and safetyCriteriaMet == True and cropProcessed == True
                    action: processedCropSent = True
                  - target: checkProcessor
                    guard: qualityCriteriaMet == False and safetyCriteriaMet == False and cropProcessed == True
                    action: processedCropSent = True
          # Distributor's Process
          ####################
          # States: Receive Stock -> Evaluate Stock -> Check Stock Quality
          ####################
          - name: Distributor
            on entry: |
              qualityCriteriaMet = False
              safetyCriteriaMet = False
            initial: receiveStock
            states:
              - name: receiveStock
                transitions:
                  - target: evaluateStocks
                    guard: processedCropSent == True
                    action: stockReceived = True
              - name: evaluateStocks
                transitions:
                  - target: stockQuality
                    guard:  stockReceived == True
                    action: |
                      stockAvailable = True
                      stockEvaluated = True
              - name: stockQuality
                transitions:
                  - target: Retailer
                    guard: qualityCriteriaMet == True and safetyCriteriaMet == True and stockEvaluated == True
                    action: |
                      deliverStocks = True
                      stockAvailable = False
                  - target: checkDistributor
                    guard: qualityCriteriaMet == False and safetyCriteriaMet == False and stockEvaluated == True
                    action: |
                      deliverStocks = True
                      stockAvailable = False
                  #- target: Retailer
                    #guard: qualityCriteriaMet == True and safetyCriteriaMet == True and stockAvailable == True
                    #action: |
                      #deliverStocks = True
                      #qualityCriteriaMet = False
                      #safetyCriteriaMet = False
          # Retailer's Process
          ####################
          # States: Receive Products -> Store Products -> Sell Products or Order Products from Distributor
          ####################
          - name: Retailer
            on entry: |
              qualityCriteriaMet = False
              safetyCriteriaMet = False
            initial: receiveProducts
            states:
              - name: receiveProducts
                transitions:
                  - target: storeProducts
                    guard: deliverStocks == True
                    action: productReceived = True
              - name: storeProducts
                transitions:
                  - target: sellProducts
                    guard:  productReceived == True
                    action: productStored = True
              #- name: orderProducts
               # type: deep history
               # memory: awaitDelivery
                #transitions:
                 # - target: stockQuality
                  #  guard:  productAvailable == False
                 # - target: awaitDelivery
                   # guard:  productAvailable == True
              - name: sellProducts
                transitions:
                  - target: Customer
                    guard:  qualityCriteriaMet == True and safetyCriteriaMet == True and productsStored == True
                    action: productAvailable == True
                  - target: checkRetailer
                    guard: qualityCriteriaMet == False and safetyCriteriaMet == False and productsStored == True
                    action: productAvailable = True
          # Customer's Process
          ####################
          # States: Browse Products -> Payment or Browse Products -> Place Order -> Await Delivery -> Payment
          ####################
          - name: Customer
            on entry: |
              qualityCriteriaMet = False
              safetyCriteriaMet = False
            initial: browseProducts
            states:
              - name: browseProducts
                transitions:
                  - target: payment
                    guard: productAvailable == True
                  - target: placeOrder
                    guard: productAvailable == False
              - name: placeOrder
                transitions:
                  - target: awaitDelivery
                    action: deliveryMade = True
              - name: awaitDelivery
                transitions:
                  - target: payment
                    guard: productAvailable == True
                    action: waitingDelivery = False
                  - target: Retailer
                    guard: productAvailable == False
                    action: waitingDelivery = True
              - name: payment
                on entry: paymentCompleted = True
                type: final
      # Regulation of the Product from Regulator on each Stakeholder until reached the Customer
      - name: RegulatorControl
          ####################
          # States: Check Farmer, Check Processor, Check Distributor, Check Retailer
          ####################
        initial: checkFarmer
        states:
          - name: checkFarmer
            transitions:
              - target: cropQuality
                action: qualityCriteriaMet = True and safetyCriteriaMet = True
          - name: checkProcessor
            transitions:
              - target: processedCropQuality
                action: qualityCriteriaMet = True and safetyCriteriaMet = True
          - name: checkDistributor
            transitions:
              - target: stockQuality
                action: qualityCriteriaMet = True and safetyCriteriaMet = True
          - name: checkRetailer
            transitions:
              - target: sellProducts
                action: qualityCriteriaMet = True and safetyCriteriaMet = True

 